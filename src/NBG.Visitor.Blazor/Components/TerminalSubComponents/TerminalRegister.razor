@using MudBlazor;
@using System.ComponentModel.DataAnnotations
@using NBG.Visitor.Domain.Dtos

<MudGrid Justify=Justify.Center Class="center" Style="height: 89%; padding: 0 1rem">
    <MudItem lg=7>
        <MudPaper Style="padding: 2rem; background-color: #fffc; border-radius: 1rem;" Elevation=15>
            <MudForm @ref="_visitorForm" @bind-IsValid=Valid>
                <MudGrid Justify=Justify.Center Style="text-align: center;">
                    <MudItem xs=12 Class="mb-6">
                        <MudText Typo="Typo.h2">@Loc["VisitorRegistration"]</MudText>
                    </MudItem>
                    <MudItem xs=12 Style="display: flex; justify-content: space-between; align-items: flex-end;">
                        <MudText Typo=Typo.subtitle2 Align=Align.Left>* @Loc["RequiredFields"]</MudText>
                        <MudButton Class="touchscreen-button" Variant=Variant.Outlined EndIcon=@Icons.Material.Filled.Delete OnClick=Reset>@Loc["ClearFields"]</MudButton>
                    </MudItem>
                    <MudItem xs=6>
                        <MudTextField Required="true" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.FirstName" Label=@Loc["FirstName"] Variant=Variant.Filled Clearable=true RequiredError=@Loc["Required"] Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem xs=6>
                        <MudTextField Required="true" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.LastName" Label=@Loc["LastName"] Variant=Variant.Filled Clearable=true RequiredError=@Loc["Required"] Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem xs=12>
                        <MudTextField Required="true" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.PhoneNumber" Label=@Loc["PhoneNumber"] Variant=Variant.Filled Clearable=true RequiredError=@Loc["Required"] Validation="@(new PhoneAttribute() {ErrorMessage = Loc["WrongPhone"]})" Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem xs=12>
                        <MudTextField Required="false" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.Email" Label=@Loc["Email"] Variant=Variant.Filled Clearable=true Validation=@(new Func<string, string>(ValidateEmail)) RequiredError=@Loc["Required"] Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem xs=12>
                        <MudTextField Required="false" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.Company" Label=@Loc["Company"] Variant=Variant.Filled Clearable=true RequiredError=@Loc["Required"] Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem xs=12>
                        <MudTextField Required="true" Class="mb-2 touchscreen-textfield absolute-helper-container" T="string" @bind-Value="FormData.ContactPerson" Label=@Loc["ContactPerson"] Variant=Variant.Filled Clearable=true RequiredError=@Loc["Required"] Immediate=true TextChanged=Revalidate />
                    </MudItem>
                    <MudItem>

                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

<TerminalFooter @bind-SelectedLanguage=Loc.Culture>
    <LeftItem>
        @if (OnBack.HasDelegate)
        {
            <MudButton Class="touchscreen-button" OnClick=@(async () => await OnBack.InvokeAsync()) Size=Size.Large Variant=Variant.Filled Color=Color.Secondary StartIcon=@Icons.Outlined.ArrowBack>@Loc["Back"]</MudButton>
        }
    </LeftItem>
    <RightItem>
        <MudButton Class="touchscreen-button" OnClick=Next Size=Size.Large Variant=Variant.Filled Color=Color.Secondary EndIcon=@Icons.Outlined.ArrowForward Disabled=!Valid>@Loc["Next"]</MudButton>
    </RightItem>
</TerminalFooter>

@code {
    [CascadingParameter]
    public Localizer Loc { get; set; }

    [Parameter]
    public EventCallback OnNext { get; set; }
    [Parameter]
    public EventCallback OnBack { get; set; }

    public RegisterFormDataDto FormData { get; set; }
    #if DEBUG
    = new() {FirstName = "Max", LastName = "Mustermann", PhoneNumber = "1234", Company = "Test", ContactPerson = "Test"};
    #else
    = new();
    #endif

    private MudForm _visitorForm;
    private bool _valid = false;
    public bool Valid
    {
        get
        {
            return _valid;
        }
        set
        {
            _valid = value;
            StateHasChanged();
        }
    }

    #if DEBUG
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(async () =>
			{
				await Task.Delay(500);
                await InvokeAsync(_visitorForm.Validate);
				await InvokeAsync(StateHasChanged);
			});
        }
        base.OnAfterRender(firstRender);
    }
    #endif

    private string ValidateEmail(string email)
    {
        email = email?.Trim();
        if (email == null || email == "")
            return null;
        else
        {
            if (new EmailAddressAttribute().IsValid(email))
                return null;
            else
                return Loc["WrongEmail"];
        }
    }

    private void Revalidate() => Valid = false;

    private async Task Next()
    {
        if (Valid)
        {
            await OnNext.InvokeAsync();
        }
    }

    /// <summary>
    /// Resets the validation and all values of the form.
    /// </summary>
    public void Reset()
    {
        FormData = new();
        _visitorForm.Reset();
        _visitorForm.ResetValidation();
    }

    /// <summary>
    /// Manually validates the form.
    /// </summary>
    public async Task Validate()
    {
        await _visitorForm.Validate();
    }
}
