@using MudBlazor;
@using System.Reflection

<MudGrid Justify=Justify.Center Class="center" Style="height: 88%;">
	<MudItem Class="center" Style="height: 15%; align-items: end;" xs=12>
		<MudText Typo="Typo.h2">@Loc["SafetyInfo"]</MudText>
	</MudItem>
    <MudItem Style="height: 85%;" xs=12>
		<CustomMudCarousel @ref="_carousel" SelectedIndexChanged=StateHasChanged Style="height: 100%;" AutoCycle="false" Wrap="false" TData="object">
			@for(int p = 0; p < Pages; p++)
			{
				var localp = p;
				<MudCarouselItem>
					<MudGrid Style="height: 100%; padding: 1rem 4rem 2rem;" Justify=Justify.Center>
						@for (int i = ItemsPerPage * localp; (i < ItemsPerPage * localp + ItemsPerPage) && i < _safetyItems.Length; i++)
						{
							var locali = i;
							<MudItem xs="5" Class="center">
								<MudPaper Elevation=15 Style="padding: 1rem; background-color: #fffc; width: 100%;">
									<div style="height: 10em; display: flex; width: 100%;">
										<img style="width: 10em; align-self: center" src="@(_safetyItems[locali].ImagePath)"/>
										<div style="overflow: scroll; margin-left: 2em;">
											<MudText Style="text-decoration: underline;" Typo=Typo.h5>@_safetyItems[locali].Title</MudText>
											<MudText>@_safetyItems[locali].Text</MudText>
										</div>
									</div>
								</MudPaper>
							</MudItem>
						}
					</MudGrid>
				</MudCarouselItem>
			}
		</CustomMudCarousel>
	</MudItem>
</MudGrid>

<TerminalFooter @bind-SelectedLanguage=Loc.Culture>
	<LeftItem>
		<MudButton Class="touchscreen-button" OnClick=Back Size=Size.Large Variant=Variant.Filled Color=Color.Secondary StartIcon=@Icons.Outlined.ArrowBack Disabled=@(!OnBack.HasDelegate && _carousel.SelectedIndex == 0)>@Loc["Back"]</MudButton>
	</LeftItem>
	<CenterItem>
		@if (_carousel.SelectedIndex == Pages - 1)
		{
			<MudCheckBox @bind-Checked="_accepted" Label=@Loc["SafetyInfoRead"] Required=true RequiredError=@Loc["SafetyInfoNotRead"]/>
		}
	</CenterItem>
	<RightItem>
		<MudButton Class="touchscreen-button" OnClick=NextOrRegister Size=Size.Large Variant=Variant.Filled Color=@(!LastPage ? Color.Secondary : Color.Success) EndIcon=@Icons.Outlined.Check Disabled=@(_registering || LastPage && !_accepted)>
			@if (_registering)
			{
				<div class="mr-4" style="height: 2rem">
					<MudProgressCircular Indeterminate="true" Style="height: 2rem; width: 2rem;"/>
				</div>
			}
			@(_carousel.SelectedIndex < Pages - 1 ? Loc["Next"] : Loc["FinishRegister"])
		</MudButton>
	</RightItem>
</TerminalFooter>

@code {
	[CascadingParameter]
	public Localizer Loc { get; set; }

	[CascadingParameter]
	public System.Resources.ResourceManager SafetyItemResource { get; set; }

	[Parameter]
	public EventCallback OnRegister { get; set; }
	[Parameter]
	public EventCallback OnBack { get; set; }

	[Parameter]
	public int ItemsPerPage { get; set; } = 6;

	public int Pages
	{
		get
		{
			return (int)Math.Ceiling((double)_safetyItems.Length / (double)ItemsPerPage);
		}
	}
	public bool LastPage
	{
		get
		{
			return !(_carousel.SelectedIndex < Pages - 1);
		}
	}

	private CustomMudCarousel<object> _carousel;
	private SafetyItem[] _safetyItems => SafetyItem.LoadFromResource((SafetyItemResource != null) ? new Localizer(SafetyItemResource, Loc.Culture) : new("NBG.Visitor.Resources.SafetyItems", Assembly.GetEntryAssembly(), Loc.Culture)).ToArray();
	private bool _accepted;
	private bool _registering = false;

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			//Needed to enable carousels indexchanged event
			Task.Run(async () =>
			{
				await Task.Delay(500);
				await InvokeAsync(StateHasChanged);
			});
		}
		base.OnAfterRender(firstRender);
	}

	private async Task Back()
	{
		if (_carousel.SelectedIndex == 0)
			await OnBack.InvokeAsync();
		else
			_carousel.Previous();
	}

	private async Task NextOrRegister()
	{
		if (LastPage)
		{
			if (_accepted)
			{
				_registering = true;
				await OnRegister.InvokeAsync();
				_registering = false;
			}
		}
		else
			_carousel.Next();
	}
}
