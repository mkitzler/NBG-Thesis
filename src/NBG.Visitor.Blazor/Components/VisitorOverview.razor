@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.JSInterop
@using MudBlazor;
@using NBG.Visitor.Blazor.TicketGeneration
@using NBG.Visitor.Domain;
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Blazor.Components.Dialogs;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using System.Drawing
@using PdfSharp.Pdf

@inject IJSRuntime JS;
@inject IVisitService DataRepository;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject ITicketService TicketService;

<link href="_content/NBG.Visitor.Blazor/css/VisitorOverview.css" rel="stylesheet"/>

<MudThemeProvider Theme="MudBlazorConfig.VisitorOverviewTheme" />
<MudDialogProvider/>
<MudSnackbarProvider/>


@if (_loading)
{
    // To reposition Loading bar
    <style>
        .mud-table .mud-table-body tr:first-child{
            height:4px !important;
        }
    </style>
}

<MudTable Items=@Visits @ref="_visitTable" Class="ml-8 mr-8 mt-7 rounded-lg visitTable" Elevation="5" Filter="new Func<VisitDto,bool>(FilterFunc)" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Loading="@_loading" FixedFooter="@fixedFooter" FixedHeader="@fixedHeader" Breakpoint="Breakpoint.Sm" HorizontalScrollbar=true NoRecordsContent="@NoVisitMessage"> 
    <ToolBarContent>
        <MudCard Elevation="0">
            <div id="titleDescBox">
                <MudText Typo="Typo.h5">@Loc["Title"]</MudText>
                <MudText>@Loc["Description"]</MudText>
            </div>
            <MudForm>
                <MudRadioGroup @bind-SelectedOption="@ActiveFilter">
                    <MudRadio Option="@(VisitStatusDto.VISIT_ACTIVE)" Color="MudBlazor.Color.Success" T="VisitStatusDto?">@Loc["Active"]</MudRadio>
                    <MudRadio Option="@(VisitStatusDto.VISIT_PENDING)" Color="MudBlazor.Color.Warning" T="VisitStatusDto?">@Loc["Pending"]</MudRadio>
                    <MudRadio Option="@(VisitStatusDto.VISIT_OVER)" Color="MudBlazor.Color.Error" T="VisitStatusDto?">@Loc["Over"]</MudRadio>
                </MudRadioGroup>
            </MudForm>
        </MudCard>

        <MudTextField @bind-Value="searchString" Placeholder=@Loc["Search"] Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium"></MudTextField>
        <MudIconButton OnClick="ResetFilters" Class="resetFilterBtn visitorOverviewBtn" Style=@resetFilterBtnStyle Icon="@Icons.Filled.Close" ></MudIconButton>
        
    </ToolBarContent>
    <HeaderContent >
        <MudTh Class="pl-16"><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.FirstName)">@Loc["FirstName"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.LastName)">@Loc["LastName"]</MudTableSortLabel></MudTh>
        <MudTh>@Loc["PhoneNr"]</MudTh>
        <MudTh>@Loc["Email"]</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.CompanyLabel)">@Loc["Company"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.ContactPerson)">@Loc["ContactPerson"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.PlannedVisitStart)">@Loc["PlannedArrival"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<VisitDto, object>(x=>x.VisitStart)">@Loc["Start"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.VisitEnd)">@Loc["End"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Status)">@Loc["Status"]</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh Class="addVisitTh">
            <MudTooltip Text="@Loc["AddVisit"]" id="addButtonToolTip">
                <MudIconButton OnClick="AddVisit" Class="visitorOverviewBtn" id="addVisitBtn" Icon="@Icons.Filled.Add"></MudIconButton>
            </MudTooltip>   
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="pl-16">@context.Visitor.FirstName</MudTd>
        <MudTd>@context.Visitor.LastName</MudTd>
        <MudTd>@context.Visitor.PhoneNumber</MudTd>
        <MudTd>@context.Visitor.Email</MudTd>
        <MudTd>@context.CompanyLabel</MudTd>
        <MudTd>@context.ContactPerson</MudTd>
        <MudTd>@context.PlannedVisitStart?.ToString("g", Loc.Culture)</MudTd>
        <MudTd>@context.VisitStart?.ToString("g", Loc.Culture)</MudTd>
        <MudTd>@context.VisitEnd?.ToString("g", Loc.Culture)</MudTd>

        <MudTd Class="pt-1 pb-1">
            @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
            {
                <MudChip Class="visitStatusChip" Color="MudBlazor.Color.Success" Size=MudBlazor.Size.Small>@Loc["ActiveLong"]</MudChip> 
            }
            else if(@context.Status == VisitStatusDto.VISIT_OVER){
                <MudChip Class="visitStatusChip" Color="MudBlazor.Color.Error" Size=MudBlazor.Size.Small>@Loc["OverLong"]</MudChip>
            }
            else{
                <MudChip Class="visitStatusChip" Color="MudBlazor.Color.Warning" Size=MudBlazor.Size.Small>@Loc["PendingLong"]</MudChip>
            }
        </MudTd>

        @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
        {
            <MudTd Class = "pt-1 pb-1">
                <MudIconButton OnClick=@(()=>SignOffVisit(@context)) Class="signOffBtn visitorOverviewBtn" Icon=@Icons.Filled.Logout></MudIconButton>
            </MudTd>
        }
        else
        {
            <MudTd Class="pt-0 pb-0"></MudTd>
        }
        
        <MudTd Class="optionsMenuTd pt-1 pb-1" @onmouseenter="CloseMenu">
            <MudMenu Class="optionsMenu" Icon="@Icons.Filled.MoreVert" Dense=true PopoverClass="optionsMenuPopover" @ref="menu" >
                <div class = "optionsMenuContainer">
                    <MudMenuItem OnClick=@(()=>EditVisit(@context))><MudText Style="font-size:12px;">@Loc["Edit"]</MudText></MudMenuItem>
                    <MudMenuItem OnClick=@(()=>PrintVisitorPass(@context))><MudText Style="font-size:12px;">@Loc["PrintVisitorPass"]</MudText></MudMenuItem>
                    <MudMenuItem OnClick=@(()=>DeleteVisit(@context)) Style="@($"color:{Colors.Red.Default};")"><MudText Style="font-size:12px;">@Loc["Delete"]</MudText></MudMenuItem>
                </div>
            </MudMenu>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions" @ref="_pager"/>
    </PagerContent>
</MudTable>


@code {

    private List<VisitDto> Visits = new List<VisitDto>();

    // MudTable configuration
    bool _loading = true;
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixedHeader = true;
    private bool fixedFooter = true;
    private int[] pageSizeOptions = new int[] { 10, 25, 50, 100 };
    private string resetFilterBtnStyle { get; set; } = "visibility:hidden;";
    MudTablePager _pager {  get;  set; }
    MudTable<VisitDto> _visitTable { get; set; }

    // MudMenu
    MudMenu menu { set => menus.Add(value); }
    List<MudMenu> menus = new List<MudMenu>();

    // Dialog configuration
    private DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
    bool showNoVisitPrompt { get; set; } = false;
    private RenderFragment NoVisitMessage { get; set; }

    // Filtering
    private string searchString = "";
    private VisitStatusDto? ActiveFilter { get; set; }
    private string statusFilterStr { get; set; } = "None";

    // Localization
    [CascadingParameter]
    public Localizer Loc { get; set; }

    /////////////////////////////////////////////////////////////////////////// 

    protected override async Task OnInitializedAsync()
    {
        var visits = await DataRepository.ReadAllVisits();
        foreach(var visit in visits){
            Visits.Add(visit);
        }
        _loading = false;
        if (_visitTable.GetFilteredItemsCount() > 0)
        {
            showNoVisitPrompt = false;
        }
        else
        {
            showNoVisitPrompt = true;
        }
    }

    public async Task AddVisit()
    {
        VisitDto _visit = new VisitDto();
        _visit.Visitor = new VisitorDto();
        //_visit.Status = VisitStatusDto.VISIT_PENDING;

        var parameters = new DialogParameters { ["visit"] = _visit, ["mode"]="Add" };
        parameters.Add("Loc", Loc);

        var dialog = DialogService.Show<EditDialog>(Loc["AddVisit"], parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        { 
            var visit = (VisitDto)result.Data;
            visit.Status = VisitStatusDto.VISIT_PENDING;

            visit = await DataRepository.AddVisit(visit.PlannedVisitStart, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email, visit.CompanyLabel, visit.ContactPerson, VisitStatusDto.VISIT_PENDING);

            Visits.Add(visit);

            Snackbar.Add(Loc["AddedVisitMsg"], Severity.Success);
            await JS.InvokeVoidAsync("console.log",Loc["AddedVisitMsg"]);

            //Navigate to last page of VISIT_PENDING filter => Location of newly added visitor
            ActiveFilter = VisitStatusDto.VISIT_PENDING;
            _visitTable.NavigateTo(Page.Last);
        }
    }

    public async Task EditVisit(VisitDto _visit)
    {
        var parameters = new DialogParameters { ["visit"]=_visit, ["mode"]="Edit" };
        parameters.Add("Loc", Loc);

        var dialog = DialogService.Show<EditDialog>(Loc["EditVisit"], parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??null, visit.Status, visit.ContactPerson, visit.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);

            Snackbar.Add(Loc["ChangesSavedMsg"], Severity.Success);
            await JS.InvokeVoidAsync("console.log",Loc["ChangesSavedMsg"]);
        }
    }

    public async Task SignOffVisit(VisitDto _visit)
    {
        var parameters = new DialogParameters { ["visit"] = _visit };
        parameters.Add("Loc", Loc);

        var dialog = DialogService.Show<SignOffDialog>(Loc["SignOffVisitor"], parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            if (visit.VisitEnd != null)
                visit.Status = VisitStatusDto.VISIT_OVER;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??DateTime.Now, visit.Status, visit.ContactPerson, visit.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);

            Snackbar.Add(Loc["SignedOffVisitor"], Severity.Success);
            await JS.InvokeVoidAsync("console.log",Loc["SignedOffVisitor"]);
        }
        
        if(Visits.Where(x => x.Status == VisitStatusDto.VISIT_ACTIVE).ToList().Count <= 0)
        {
            parameters = new DialogParameters();
            parameters.Add("ContentText", Loc["AllSignedOffPrompt"]);
            parameters.Add("ButtonText", "OK");
            parameters.Add("Color", MudBlazor.Color.Success);
            parameters.Add("Loc", Loc);

            dialog = DialogService.Show<Dialog>(Loc["DeleteVisit"], parameters);
        }
    }

    public async Task PrintVisitorPass(VisitDto visit)
    {
        //byte[] qr = QRGenerator.GenerateQrCode("https://fiss.dev.nbg.tech:44303/terminal/" + Loc.Culture.Name + "/" + visit.Guid.ToString());
        byte[] qr = await TicketService.GenerateQR("https://fiss.dev.nbg.tech:44303/terminal/" + Loc.Culture.Name + "/" + visit.Guid.ToString());

        RenderFragment rf = 
        @<div>
                    <img style="width: 100%" src="@($"data:image/png;base64,{Convert.ToBase64String(qr)}")"/>
                    <a href=@("https://fiss.dev.nbg.tech:44303/terminal/" + Loc.Culture.Name + "/" + visit.Guid.ToString())>Link</a>
        </div>
        ;
        var dialog = DialogService.Show<MudDialog>(visit.Visitor.FirstName + " " + visit.Visitor.LastName, new DialogParameters() {["DialogContent"] = rf});

        //byte[] pdf = TicketPdfGenerator.GetPdf(Loc, qr, visit.Guid.ToString(), visit.Visitor.FullName/* + " " + visit.VisitStart?.ToString("g", Loc.Culture) ???*/, visit.VisitStart??DateTime.Now);
        byte[] pdf = await TicketService.GenerateTicket(Loc["VisitorTicket"], (/*registeredAt > DateTime.Now TODO: adjust for this use case*/true ? Loc["PlannedArrival"] : Loc["Arrival"]), Loc.Culture, qr, visit.Guid.ToString(), visit.Visitor.FullName/* + " " + visit.VisitStart?.ToString("g", Loc.Culture) ???*/, visit.VisitStart ?? DateTime.Now);
        using (System.IO.MemoryStream ms = new System.IO.MemoryStream(pdf))
        {
            using (System.IO.FileStream fs = new System.IO.FileStream("./pdf.pdf", System.IO.FileMode.Create))
            {
                ms.CopyTo(fs);
            }
        }

        if (await dialog.Result == DialogResult.Cancel()) {} 
    }

    public async Task DeleteVisit(VisitDto visit)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", Loc["DeleteVisitPrompt"]);
        parameters.Add("ButtonText", "OK");
        parameters.Add("Color", MudBlazor.Color.Error);
        parameters.Add("Loc", Loc);

        var dialog = DialogService.Show<Dialog>(Loc["DeleteVisit"], parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DataRepository.RemoveVisit(visit.Id);
            Visits.Remove(visit);
            await DataRepository.RemoveOldVisits();

            Snackbar.Add(Loc["DeletedVisitMsg"], Severity.Success);
            await JS.InvokeVoidAsync("console.log",Loc["DeletedVisitMsg"]);
        }
    }

    private bool FilterFunc(VisitDto visit)
    {
        if(searchString != "" || ActiveFilter != null)
        {
            ShowCancelFilterButton();
        }
        if (visit.Status == ActiveFilter || ActiveFilter == null)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (visit.Visitor.FirstName.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.Visitor.LastName.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.Visitor.Email != null)
                if (visit.Visitor.Email.ToLower().Contains(searchString.ToLower()))
                    return true;
            if (visit.Visitor.PhoneNumber.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.ContactPerson != null)
                if (visit.ContactPerson.ToLower().Contains(searchString.ToLower()))
                    return true;
            if (visit.CompanyLabel != null)
                if (visit.CompanyLabel.ToLower().Contains(searchString.ToLower()))
                    return true;
        }
        return false;
    }

    private void ShowCancelFilterButton()
    {
        resetFilterBtnStyle = "visibility:visible;";
    }

    private void ResetFilters()
    {
        ActiveFilter = null;
        searchString = "";
        resetFilterBtnStyle = "visibility:hidden;";
    }

    //Close all menus
    private void CloseMenu(){
        foreach (var item in menus)
        {
            item.CloseMenu();
        }   
        Console.WriteLine(menus.Count);
    }
    //table: OnRowClick, SellectedItem, SelectedItemChanged, SetSelectedItem
    //Focus trap?
}

